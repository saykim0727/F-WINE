"{\"version\":\"eosio::abi/1.0\",\"types\":[{\"new_type_name\":\"account_name\",\"type\":\"name\"}],\"structs\":[{\"name\":\"propose\",\"base\":\"\",\"fields\":[{\"name\":\"proposer\",\"type\":\"account_name\"},{\"name\":\"proposal_name\",\"type\":\"name\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"proposal_json\",\"type\":\"string\"},{\"name\":\"expires_at\",\"type\":\"time_point_sec\"}]},{\"name\":\"expire\",\"base\":\"\",\"fields\":[{\"name\":\"proposal_name\",\"type\":\"name\"}]},{\"name\":\"vote\",\"base\":\"\",\"fields\":[{\"name\":\"voter\",\"type\":\"account_name\"},{\"name\":\"proposal_name\",\"type\":\"name\"},{\"name\":\"vote\",\"type\":\"uint8\"},{\"name\":\"vote_json\",\"type\":\"string\"}]},{\"name\":\"unvote\",\"base\":\"\",\"fields\":[{\"name\":\"voter\",\"type\":\"account_name\"},{\"name\":\"proposal_name\",\"type\":\"name\"}]},{\"name\":\"clnproposal\",\"base\":\"\",\"fields\":[{\"name\":\"proposal_name\",\"type\":\"name\"},{\"name\":\"max_count\",\"type\":\"uint64\"}]},{\"name\":\"post\",\"base\":\"\",\"fields\":[{\"name\":\"poster\",\"type\":\"account_name\"},{\"name\":\"post_uuid\",\"type\":\"string\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"reply_to_poster\",\"type\":\"account_name\"},{\"name\":\"reply_to_post_uuid\",\"type\":\"string\"},{\"name\":\"certify\",\"type\":\"bool\"},{\"name\":\"json_metadata\",\"type\":\"string\"}]},{\"name\":\"unpost\",\"base\":\"\",\"fields\":[{\"name\":\"poster\",\"type\":\"account_name\"},{\"name\":\"post_uuid\",\"type\":\"string\"}]},{\"name\":\"status\",\"base\":\"\",\"fields\":[{\"name\":\"account\",\"type\":\"account_name\"},{\"name\":\"content\",\"type\":\"string\"}]},{\"name\":\"proposal_row\",\"base\":\"\",\"fields\":[{\"name\":\"proposal_name\",\"type\":\"name\"},{\"name\":\"proposer\",\"type\":\"account_name\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"proposal_json\",\"type\":\"string\"},{\"name\":\"created_at\",\"type\":\"time_point_sec\"},{\"name\":\"expires_at\",\"type\":\"time_point_sec\"}]},{\"name\":\"status_row\",\"base\":\"\",\"fields\":[{\"name\":\"account\",\"type\":\"account_name\"},{\"name\":\"content\",\"type\":\"string\"},{\"name\":\"updated_at\",\"type\":\"time_point_sec\"}]},{\"name\":\"vote_row\",\"base\":\"\",\"fields\":[{\"name\":\"id\",\"type\":\"uint64\"},{\"name\":\"proposal_name\",\"type\":\"name\"},{\"name\":\"voter\",\"type\":\"account_name\"},{\"name\":\"vote\",\"type\":\"uint8\"},{\"name\":\"vote_json\",\"type\":\"string\"},{\"name\":\"updated_at\",\"type\":\"time_point_sec\"}]}],\"actions\":[{\"name\":\"propose\",\"type\":\"propose\",\"ricardian_contract\":\"# Action - `{{ propose }}`\\n\\n## Description\\n\\n`propose` creates a message on-chain with the intention of receiving \\nvotes from any community members who wish to cast a `vote`.\\n\\nEach proposal shall be identified with a unique `proposal_name`.\\n\\nAn expiry will be defined in `expires_at`, with {{ expires_at }} \\nbeing no later than 6 months in the future. \\n\\n{{ proposer }} must pay for the RAM to store {{ proposal_name }}, which\\nwill be returned to them once `clnproposal` has been called.\\n\"},{\"name\":\"expire\",\"type\":\"expire\",\"ricardian_contract\":\"# Action - `{{ expire }}`\\n\\n## Description\\n\\n`expire` can only be called by {{ proposer }}.\\n\\n`expire` is used to modify the value of `expires_at` to the new time {{ expires_at }}. Once `expire` has been called,\\nno more votes will be accepted for {{ proposal_name }}.\\n\"},{\"name\":\"vote\",\"type\":\"vote\",\"ricardian_contract\":\"# Action - `{{ vote }}`\\n\\n## Description\\n\\nA user is able to cast a vote by associating it to {{ proposal_name }}. To \\nchange a vote, a {{ voter }} only needs to call another `vote` action - only the \\nmost recent vote of {{ vote_value }} by {{ voter }} will be considered as valid . A user\\ncould also use `unvote` to override their previous `vote`.\\n\\nIf I, {{ voter }}, am not the beneficial owner of these tokens, I stipulate I have proof \\nthat I\u2019ve been authorized to vote these tokens by their beneficial owner(s).\\n\\nA user who has a proxy set on their account will be providing implicit consent\\nfor that proxy to `vote` on their behalf. A user who has a designated proxy\\nmay choose to also cast a `vote`, which will override the delegation of voting\\nauthority to that proxy.\\n\\nI stipulate I have not and will not accept anything of value in exchange for these \\nvotes, on penalty of confiscation of these tokens, and other penalties. \\n\\nAny disputes arising out of use of this contract shall be ruled under the Rules\\nfor Dispute Resolution of the EOS Core Arbitration Forum by one or more arbitrators \\nappointed in accordance with said Rules.\\n\"},{\"name\":\"unvote\",\"type\":\"unvote\",\"ricardian_contract\":\"# Action - `{{ unvote }}`\\n\\n## Description\\n\\n`unvote` allows a user to remove their vote of {{ vote_value }} they have previously\\ncast on {{ proposal_name }}. \\n\\n`unvote` will not function during the 72 hour period after \\n{{ proposal_name }} has expired at {{ expires_at }}.\\n\\nThe RAM that was used to store the vote shall be freed-up immediately\\nafter `unvote` has been called by {{ voter }}.\"},{\"name\":\"clnproposal\",\"type\":\"clnproposal\",\"ricardian_contract\":\"# Action - `{{ clnproposal }}`\\n\\n## Description\\n\\nThis action is used to clear the RAM being used to store all information related to \\n{{ proposal_name }}. All associated votes must be cleared before {{ proposal_name }}\\ncan be cleared from the RAM of {{ proposer }}.\\n\\nThis action can be called by any user, requiring no authorization.\\n\\nThis action can only be called 72 hours after {{ expires_at }} has been reached.\\n{{ expires_at }} is set at the moment that {{ proposal_name }} is created, and can\\nonly be updated by {{ proposer }}. This will allow time to compute a tally of all\\nassociated votes before it can be cleared.\\n\\nThe user who calls `clnproposal` will pay the CPU and NET bandwidth required\\nto process the action. They will need to specify `max_count` to ensure that the \\naction can be processed within a single block's maximum allowable limits.\\n\"},{\"name\":\"post\",\"type\":\"post\",\"ricardian_contract\":\"# Action - `{{ post }}`\\n\\n## Description\\n\\n`post` is used to create a post that can either be a parent or\\nbe a response to parent post. They are threaded together using their \\nunique identifier {{ post_uuid }}.\\n\"},{\"name\":\"unpost\",\"type\":\"unpost\",\"ricardian_contract\":\"# Action - `{{ unpost }}`\\n\\n## Description\\n\\nThe intent of the `unpost` action is to suggest that a previously posted message (through the `post` action), as referred by {{ post_uuid }}, be removed by the different front-ends reading this contract's transaction flow.\\n\\nI, {{ poster }} understand that this action will not remove the message from circulation, as it will be imprinted in the blockchain.  I also understand that some front-ends might not remove the message, and even highlight the fact that a message was intended to be removed, potentially attracting attention on an undesired message.\\n\"},{\"name\":\"status\",\"type\":\"status\",\"ricardian_contract\":\"# Action - `{{ status }}`\\n\\n## Description\\n\\n`status` is used to record a status for the associated {{ account }}.\\nIf the {{ content }} is empty, the action will remove a previous status.\\nOtherwise, it will add a status entry for the {{ account }} using the\\n{{ content }} received.\\n\"}],\"tables\":[{\"name\":\"proposal\",\"index_type\":\"i64\",\"key_names\":[\"proposal_name\",\"by_proposer\"],\"key_types\":[\"name\",\"name\"],\"type\":\"proposal_row\"},{\"name\":\"vote\",\"index_type\":\"i64\",\"key_names\":[\"id\",\"by_proposal\",\"by_voter\"],\"key_types\":[\"i64\",\"i128\",\"i128\"],\"type\":\"vote_row\"},{\"name\":\"status\",\"index_type\":\"i64\",\"key_names\":[\"account\"],\"key_types\":[\"name\"],\"type\":\"status_row\"}],\"error_messages\":[],\"abi_extensions\":[],\"variants\":[]}"